name: Release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21.0'
          cache: true
      
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}

  npm-publish:
    needs: goreleaser
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Get release version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Download release assets
        run: |
          mkdir -p binaries
          
          # Wait a moment for release assets to be fully available
          sleep 10
          
          # Download binaries from the release
          gh release download v${{ steps.get_version.outputs.VERSION }} \
            --pattern "cadence-codegen_Darwin_x86_64.tar.gz" \
            --pattern "cadence-codegen_Darwin_arm64.tar.gz" \
            --pattern "cadence-codegen_Linux_x86_64.tar.gz" \
            --pattern "cadence-codegen_Linux_arm64.tar.gz" \
            --pattern "cadence-codegen_Windows_x86_64.zip" \
            --dir binaries/
            
          # Verify all files were downloaded
          ls -la binaries/
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Extract and organize binaries
        run: |
          cd binaries
          
          # Extract Darwin x86_64
          echo "Extracting Darwin x86_64..."
          tar -xzf cadence-codegen_Darwin_x86_64.tar.gz
          mkdir -p ../bin/darwin-x64
          mv cadence-codegen ../bin/darwin-x64/cadence-codegen
          
          # Extract Darwin arm64
          echo "Extracting Darwin arm64..."
          tar -xzf cadence-codegen_Darwin_arm64.tar.gz
          mkdir -p ../bin/darwin-arm64
          mv cadence-codegen ../bin/darwin-arm64/cadence-codegen
          
          # Extract Linux x86_64
          echo "Extracting Linux x86_64..."
          tar -xzf cadence-codegen_Linux_x86_64.tar.gz
          mkdir -p ../bin/linux-x64
          mv cadence-codegen ../bin/linux-x64/cadence-codegen
          
          # Extract Linux arm64
          echo "Extracting Linux arm64..."
          tar -xzf cadence-codegen_Linux_arm64.tar.gz
          mkdir -p ../bin/linux-arm64
          mv cadence-codegen ../bin/linux-arm64/cadence-codegen
          
          # Extract Windows x86_64
          echo "Extracting Windows x86_64..."
          mkdir -p ../bin/win32-x64
          unzip -j cadence-codegen_Windows_x86_64.zip -d ../bin/win32-x64/
          
          # Make binaries executable
          chmod +x ../bin/*/cadence-codegen*
          
          # Verify all binaries were extracted
          echo "Verifying extracted binaries..."
          ls -la ../bin/*/
        
      - name: Update package.json version
        run: |
          npm version ${{ steps.get_version.outputs.VERSION }} --no-git-tag-version
          
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}