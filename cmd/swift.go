package cmd

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/outblock/cadence-codegen/internal/analyzer"
	"github.com/outblock/cadence-codegen/internal/generator/swift"
	"github.com/spf13/cobra"
)

var swiftCmd = &cobra.Command{
	Use:   "swift [input] [output]",
	Short: "Generate Swift code from Cadence files or JSON",
	Long: `Generate Swift code from Cadence files or JSON.
The input can be either:
1. A single .cdc file
2. A directory containing .cdc files
3. A JSON file previously generated by the analyze command
The output will be a Swift file (defaults to CadenceGen.swift if not specified).`,
	Args: cobra.RangeArgs(1, 2),
	RunE: func(cmd *cobra.Command, args []string) error {
		inputPath := args[0]
		outputPath := "CadenceGen.swift"
		if len(args) > 1 {
			outputPath = args[1]
		}

		var report *analyzer.Report

		// Check if input is JSON
		if strings.HasSuffix(inputPath, ".json") {
			// Read JSON file
			jsonData, err := os.ReadFile(inputPath)
			if err != nil {
				return fmt.Errorf("failed to read JSON file: %w", err)
			}

			// Parse JSON
			report = &analyzer.Report{}
			if err := json.Unmarshal(jsonData, report); err != nil {
				return fmt.Errorf("failed to parse JSON file: %w", err)
			}
		} else {
			// Create analyzer for Cadence files
			a := analyzer.New()

			// Analyze directory or file
			err := a.AnalyzeDirectory(inputPath)
			if err != nil {
				return fmt.Errorf("failed to analyze input: %w", err)
			}

			report = a.GetReport()
		}

		// Create output directory if it doesn't exist
		err := os.MkdirAll(filepath.Dir(outputPath), 0755)
		if err != nil {
			return fmt.Errorf("failed to create output directory: %w", err)
		}

		// Generate Swift code
		gen := swift.New(*report)
		code, err := gen.Generate()
		if err != nil {
			return fmt.Errorf("failed to generate Swift code: %w", err)
		}

		// Write the generated code to file
		err = os.WriteFile(outputPath, []byte(code), 0644)
		if err != nil {
			return fmt.Errorf("failed to write Swift code: %w", err)
		}

		return nil
	},
}

func init() {
	rootCmd.AddCommand(swiftCmd)
}
